// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`integrations should work for class python code and non uglified 1`] = `
"module.exports = (function() {
        const range = (start, end, step = 1) => {
  if (end === undefined) {
    return range(0, start);
  }

  let arr = [];

  for (let i = start; i < end; i += step) {
    arr.push(i);
  }

  return arr;
}
        return (function() {
        let \\"class Maths:\\\\n    def add(self, a, b):\\\\n        return a + b\\\\n    def increment(self, i):\\\\n        return self.add(i, 1)\\\\n\\\\nmaths = Maths()\\\\nconsole.log(maths.increment(2))\\"


}

        return { ss Maths:\\\\n    def add }
    })()
    })()"
`;

exports[`integrations should work for functions python code and non uglified 1`] = `
"module.exports = (function() {
        const range = (start, end, step = 1) => {
  if (end === undefined) {
    return range(0, start);
  }

  let arr = [];

  for (let i = start; i < end; i += step) {
    arr.push(i);
  }

  return arr;
}
        return (function() {
        \\"const greet = () => {\\\\n    console.log(\\\\\\"Hello world\\\\\\")\\\\n\\\\ndef add(a, b):\\\\n    return a + b\\\\n\\\\ngreet()\\\\nconsole.log(add(2, 3))\\"


}

        return { greet }
    })()
    })()"
`;

exports[`integrations should work for modules python code and non uglified 1`] = `
"module.exports = (function() {
        const range = (start, end, step = 1) => {
  if (end === undefined) {
    return range(0, start);
  }

  let arr = [];

  for (let i = start; i < end; i += step) {
    arr.push(i);
  }

  return arr;
}
        return (function() {
        l
        return {  }
    })()
    })()"
`;

exports[`integrations should work for simple python code and non uglified 1`] = `
"module.exports = (function() {
        const range = (start, end, step = 1) => {
  if (end === undefined) {
    return range(0, start);
  }

  let arr = [];

  for (let i = start; i < end; i += step) {
    arr.push(i);
  }

  return arr;
}
        return (function() {
        let \\"a = 2\\\\nconsole.log(a)\\"
        return {  }
    })()
    })()"
`;
